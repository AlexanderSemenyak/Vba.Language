using Antlr4.Runtime;
using Antlr4.Runtime.Misc;

using Xunit;

namespace Vba.Language.Tests.Compiler
{
    public class ModuleStatementTests
    {
        [Theory]
        [InlineData("Option Compare Text", "(directiveElement (optionCompareDirective Option Compare Text))")]
        [InlineData("Option Compare Binary", "(directiveElement (optionCompareDirective Option Compare Binary))")]
        [InlineData("Option Compare Database", "(directiveElement (optionCompareDirective Option Compare Database))")]
        [InlineData("Option Base 0", "(directiveElement (optionBaseDirective Option Base 0))")]
        [InlineData("Option Base 1", "(directiveElement (optionBaseDirective Option Base 1))")]
        [InlineData("Option Explicit", "(directiveElement (optionExplicitDirective Option Explicit))")]
        [InlineData("Option Private Module", "(directiveElement (optionPrivateDirective Option Private Module))")]
        [InlineData("Implements InterfaceName", "(directiveElement (implementsDirective Implements InterfaceName))")]
        [InlineData("DefStr A", "(directiveElement (defDirective (defType DefStr) (letterSpec A)))")]
        [InlineData("DefStr A-Q", "(directiveElement (defDirective (defType DefStr) (letterSpec A - Q)))")]
        public void CanParseDirectiveElement(string source, string expectedTree)
        {
            var parser = VbaCompilerHelper.BuildVbaParser(source);

            var result = parser.directiveElement();

            Assert.Null(result.exception);
            ParseTreeHelper.TreesAreEqual(expectedTree, result.ToStringTree(parser));
        }

        [Theory]
        [InlineData("Dim Alias As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Alias) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Base As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Base) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Binary As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Binary) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim ClassInit As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier ClassInit) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim ClassTerm As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier ClassTerm) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim CLngLng As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier CLngLng) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Compare As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Compare) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Database As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Database) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim DefLngLng As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier DefLngLng) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Explicit As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Explicit) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Lib As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Lib) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim LongLong As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier LongLong) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Module As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Module) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Object As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Object) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Property As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Property) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim Text As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier Text) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim VB_Invoke_PropertyPutRefVB_MemberFlags As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier VB_Invoke_PropertyPutRefVB_MemberFlags) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]
        [InlineData("Dim PtrSafe As String", "(variableDeclaration Dim (variableDclList (variableDcl (untypedVariableDcl (identifier PtrSafe) (asClause (asType As (typeSpec (typeExpression (builtInType (reservedTypeIdentifier String))))))))))")]

        public void CanParseIdentifier(string source, string expectedTree)
        {
            var parser = VbaCompilerHelper.BuildVbaParser(source);

            var result = parser.variableDeclaration();

            Assert.Null(result.exception);
            ParseTreeHelper.TreesAreEqual(expectedTree, result.ToStringTree(parser));
        }

        [Theory]
        [InlineData("Dim Abs As String")]
        [InlineData("Dim AddressOf As String")]
        [InlineData("Dim And As String")]
        [InlineData("Dim Any As String")]
        [InlineData("Dim Array As String")]
        [InlineData("Dim As As String")]
        [InlineData("Dim Attribute As String")]
        [InlineData("Dim Boolean As String")]
        [InlineData("Dim ByRef As String")]
        [InlineData("Dim Byte As String")]
        [InlineData("Dim ByVal As String")]
        [InlineData("Dim Call As String")]
        [InlineData("Dim Case As String")]
        [InlineData("Dim CBool As String")]
        [InlineData("Dim CByte As String")]
        [InlineData("Dim CCur As String")]
        [InlineData("Dim CDate As String")]
        [InlineData("Dim CDbl As String")]
        [InlineData("Dim CDec As String")]
        [InlineData("Dim CDecl As String")]
        [InlineData("Dim CInt As String")]
        [InlineData("Dim Circle As String")]
        [InlineData("Dim CLng As String")]
        [InlineData("Dim CLngPtr As String")]
        [InlineData("Dim Close As String")]
        [InlineData("Dim Const As String")]
        [InlineData("Dim CSng As String")]
        [InlineData("Dim CStr As String")]
        [InlineData("Dim Currency As String")]
        [InlineData("Dim CVar As String")]
        [InlineData("Dim CVErr As String")]
        [InlineData("Dim Date As String")]
        [InlineData("Dim Debug As String")]
        [InlineData("Dim Decimal As String")]
        [InlineData("Dim Declare As String")]
        [InlineData("Dim DefBool As String")]
        [InlineData("Dim DefByte As String")]
        [InlineData("Dim DefCur As String")]
        [InlineData("Dim DefDate As String")]
        [InlineData("Dim DefDbl As String")]
        [InlineData("Dim DefDec As String")]
        [InlineData("Dim DefInt As String")]
        [InlineData("Dim DefLng As String")]
        [InlineData("Dim DefLngPtr As String")]
        [InlineData("Dim DefObj As String")]
        [InlineData("Dim DefSng As String")]
        [InlineData("Dim DefStr As String")]
        [InlineData("Dim DefVar As String")]
        [InlineData("Dim Dim As String")]
        [InlineData("Dim Do As String")]
        [InlineData("Dim DoEvents As String")]
        [InlineData("Dim Double As String")]
        [InlineData("Dim Each As String")]
        [InlineData("Dim Else As String")]
        [InlineData("Dim ElseIf As String")]
        [InlineData("Dim Empty As String")]
        [InlineData("Dim End As String")]
        [InlineData("Dim EndIf As String")]
        [InlineData("Dim Enum As String")]
        [InlineData("Dim Eqv As String")]
        [InlineData("Dim Erase As String")]
        [InlineData("Dim Event As String")]
        [InlineData("Dim Exit As String")]
        [InlineData("Dim Fix As String")]
        [InlineData("Dim For As String")]
        [InlineData("Dim Friend As String")]
        [InlineData("Dim Function As String")]
        [InlineData("Dim Get As String")]
        [InlineData("Dim Global As String")]
        [InlineData("Dim GoSub As String")]
        [InlineData("Dim GoTo As String")]
        [InlineData("Dim If As String")]
        [InlineData("Dim Imp As String")]
        [InlineData("Dim Implements As String")]
        [InlineData("Dim In As String")]
        [InlineData("Dim Input As String")]
        [InlineData("Dim InputB As String")]
        [InlineData("Dim Int As String")]
        [InlineData("Dim Integer As String")]
        [InlineData("Dim Is As String")]
        [InlineData("Dim LBound As String")]
        [InlineData("Dim Len As String")]
        [InlineData("Dim LenB As String")]
        [InlineData("Dim Let As String")]
        [InlineData("Dim Like As String")]
        [InlineData("Dim LINEINPUT As String")]
        [InlineData("Dim Lock As String")]
        [InlineData("Dim Long As String")]
        [InlineData("Dim LongPtr As String")]
        [InlineData("Dim Loop As String")]
        [InlineData("Dim LSet As String")]
        [InlineData("Dim Me As String")]
        [InlineData("Dim Mod As String")]
        [InlineData("Dim New As String")]
        [InlineData("Dim Next As String")]
        [InlineData("Dim Not As String")]
        [InlineData("Dim Nothing As String")]
        [InlineData("Dim Null As String")]
        [InlineData("Dim On As String")]
        [InlineData("Dim Open As String")]
        [InlineData("Dim Option As String")]
        [InlineData("Dim Optional As String")]
        [InlineData("Dim Or As String")]
        [InlineData("Dim ParamArray As String")]
        [InlineData("Dim Preserve As String")]
        [InlineData("Dim Print As String")]
        [InlineData("Dim Private As String")]
        [InlineData("Dim PSet As String")]
        [InlineData("Dim Public As String")]
        [InlineData("Dim Put As String")]
        [InlineData("Dim RaiseEvent As String")]
        [InlineData("Dim ReDim As String")]
        [InlineData("Dim Rem As String")]
        [InlineData("Dim Resume As String")]
        [InlineData("Dim Return As String")]
        [InlineData("Dim RSet As String")]
        [InlineData("Dim Scale As String")]
        [InlineData("Dim Seek As String")]
        [InlineData("Dim Select As String")]
        [InlineData("Dim Set As String")]
        [InlineData("Dim Sgn As String")]
        [InlineData("Dim Shared As String")]
        [InlineData("Dim Single As String")]
        [InlineData("Dim Spc As String")]
        [InlineData("Dim Static As String")]
        [InlineData("Dim Stop As String")]
        [InlineData("Dim String As String")]
        [InlineData("Dim Sub As String")]
        [InlineData("Dim Tab As String")]
        [InlineData("Dim Then As String")]
        [InlineData("Dim To As String")]
        [InlineData("Dim Type As String")]
        [InlineData("Dim TypeOf As String")]
        [InlineData("Dim UBound As String")]
        [InlineData("Dim Unlock As String")]
        [InlineData("Dim Until As String")]
        [InlineData("Dim Variant As String")]
        [InlineData("Dim VB_Base As String")]
        [InlineData("Dim VB_Control As String")]
        [InlineData("Dim VB_Creatable As String")]
        [InlineData("Dim VB_Customizable As String")]
        [InlineData("Dim VB_Description As String")]
        [InlineData("Dim VB_Exposed As String")]
        [InlineData("Dim VB_Ext_KEY As String")]
        [InlineData("Dim VB_GlobalNameSpace As String")]
        [InlineData("Dim VB_HelpID As String")]
        [InlineData("Dim VB_Invoke_Func As String")]
        [InlineData("Dim VB_Invoke_Property As String")]
        [InlineData("Dim VB_Invoke_PropertyPut As String")]
        [InlineData("Dim VB_Name As String")]
        [InlineData("Dim VB_PredeclaredId As String")]
        [InlineData("Dim VB_ProcData As String")]
        [InlineData("Dim VB_TemplateDerived As String")]
        [InlineData("Dim VB_UserMemId As String")]
        [InlineData("Dim VB_VarDescription As String")]
        [InlineData("Dim VB_VarHelpID As String")]
        [InlineData("Dim VB_VarMemberFlags As String")]
        [InlineData("Dim VB_VarProcData As String")]
        [InlineData("Dim VB_VarUserMemId As String")]
        [InlineData("Dim Wend As String")]
        [InlineData("Dim While As String")]
        [InlineData("Dim With As String")]
        [InlineData("Dim WithEvents As String")]
        [InlineData("Dim Write As String")]
        [InlineData("Dim Xor As String")]
        public void CannotParseInvalidIdentifier(string source)
        {
            var parser = VbaCompilerHelper.BuildVbaParser(source);

            Assert.Throws<ParseCanceledException>(() => parser.variableDeclaration());
        }
    }
}
